package it.test.serviceschedule;

import java.util.Properties;
import android.widget.TextView;

import android.app.Activity;
import android.app.AlarmManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.service.textservice.SpellCheckerService.Session;
import android.telephony.TelephonyManager;
import android.view.Menu;
import android.view.View;
import android.widget.Toast;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.Enumeration;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TextView;




public class ServiceScheduleActivity extends Activity{
	private TextView tvClientMsg,tvServerIP,tvServerPort;
	private final int SERVER_PORT = 8080; //Define the server port
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		
		super.onCreate(savedInstanceState);
		
		setContentView(R.layout.main);
		tvServerPort.setText(Integer.toString(SERVER_PORT));
		//New thread to listen to incoming connections
		  new Thread(new Runnable() {
		   @Override
		   public void run() {
		    try {
		     //Create a server socket object and bind it to a port
		     ServerSocket socServer = new ServerSocket(SERVER_PORT);
		     //Create server side client socket reference
		     Socket socClient = null;
		     //Infinite loop will listen for client requests to connect
		     while (true) {
		      //Accept the client connection and hand over communication to server side client socket
		      socClient = socServer.accept();
		      //For each client new instance of AsyncTask will be created
		      //ServerAsyncTask serverAsyncTask = new ServerAsyncTask();
		      //Start the AsyncTask execution 
		      //Accepted client socket object will pass as the parameter
		      //.execute(new Socket[] {socClient});
		      new ServerLeo().execute(new Socket[] {socClient});
		     }
		    } catch (IOException e) {
		     e.printStackTrace();
		    }
		   }
		  }).start();
	}
	
	
	public void btnStartSchedule(View v) {

		try {
			
			/*AlarmManager alarms = (AlarmManager) this.getSystemService(Context.ALARM_SERVICE);

			Intent intent = new Intent(getApplicationContext(),	AlarmReceiver.class);
			
			intent.putExtra(AlarmReceiver.ACTION_ALARM, AlarmReceiver.ACTION_ALARM);
			
			final PendingIntent pIntent = PendingIntent.getBroadcast(this, 
					1234567, intent, PendingIntent.FLAG_UPDATE_CURRENT);

			alarms.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), 10000, pIntent);
			
			//start the service from here //MyService is your service class name
	        
	        toast("Started....");
	        */
			if (GetMyNumber(getApplicationContext())){
				
				//Log.i("Alarm Receiver", "Must start service");
				//Intent inService = new Intent(context,TaskService.class);
				//context.startService(inService);
				
				Toast.makeText(getApplicationContext(), "Numero Corretto Chiudo !!!", Toast.LENGTH_SHORT).show();
				android.os.Process.killProcess(android.os.Process.myPid());
				
			} else {
			
				startService(new Intent(this, TaskService.class));
			
			}

					
			//GetMyNumber(getApplicationContext());

			
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	

	public void btnCancelSchedules(View v) {

		
		Intent intent = new Intent(getApplicationContext(), AlarmReceiver.class);
		intent.putExtra(AlarmReceiver.ACTION_ALARM, AlarmReceiver.ACTION_ALARM);

		final PendingIntent pIntent = PendingIntent.getBroadcast(this, 1234567, 
				intent, PendingIntent.FLAG_UPDATE_CURRENT);

		AlarmManager alarms = (AlarmManager) this.getSystemService(Context.ALARM_SERVICE);

		alarms.cancel(pIntent);
		
		toast("Cancel...");
		
		stopService(new Intent(this, TaskService.class));
		android.os.Process.killProcess(android.os.Process.myPid());
		//android.os.Process.killProcess(android.os.Process.myPid());
		
	}
public void btnExitSchedules(View v) {

		
		android.os.Process.killProcess(android.os.Process.myPid());
		
	}
		
	public void toast(String message) {
		Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG).show();
	}
	/*********************************************************************************************/

	
	
	
	public boolean GetMyNumber(Context context) {
		
		TelephonyManager tManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
	
		//String tnumber= tManager.getLine1Number();
		String tnumber= tManager.getSimSerialNumber();
		
		Toast.makeText(context, "Numero: " + tnumber, Toast.LENGTH_SHORT).show();
		
		//String num_to_watch = "8939880362004393450"; //SIM serial number Mikol
		String num_to_watch = "ErroreSimSerialNumber"; //SIM serial number Mikol
		
		if (tnumber.equals(num_to_watch)){ /*Numero Emulator*/
			
			/*Nessuna allerta*/
			
			    // This above line close correctly
			
			return true;
		
		} else {
			/*Allerta*/
			
			//SendEmail(context);
			return false;
		}
		    
			
	}
	
	
}

