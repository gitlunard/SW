package it.test.serviceschedule;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.util.Enumeration;

import android.os.Bundle;
import android.app.Activity;
import android.widget.TextView;
import android.os.AsyncTask;


public class ServerTcp extends AsyncTask{
	
	private String to;
	private String from;
	private String subject;
	private String message;
	
	
	public ServerTcp  (String to, String from, String subject, String message) {
		this.to = to;
		this.from = from;
		this.subject = subject;
		this.message = message;
		 
		 
	}


	 @Override
		protected Object doInBackground(Object... arg0) {
		 
		 TextView info, infoip, msg;
		 String messagee = "";
		 ServerSocket serverSocket;
	  Thread socketServerThread = new Thread(new SocketServerThread());
	  
	  socketServerThread.start();


	  if (serverSocket != null) {
	   try {
	    serverSocket.close();
	   } catch (IOException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	   }
	  }
	 }

	 private class SocketServerThread extends Thread {

	  static final int SocketServerPORT = 8080;
	  int count = 0;

	  @Override
	  public void run() {
	   try {
	    serverSocket = new ServerSocket(SocketServerPORT);
	    MainActivity.this.runOnUiThread(new Runnable() {

	     @Override
	     public void run() {
	      info.setText("I'm waiting here: "
	        + serverSocket.getLocalPort());
	     }
	    });

	    while (true) {
	     Socket socket = serverSocket.accept();
	     count++;
	     message += "#" + count + " from " + socket.getInetAddress()
	       + ":" + socket.getPort() + "\n";

	     MainActivity.this.runOnUiThread(new Runnable() {

	      @Override
	      public void run() {
	       msg.setText(message);
	      }
	     });

	     SocketServerReplyThread socketServerReplyThread = new SocketServerReplyThread(
	       socket, count);
	     socketServerReplyThread.run();

	    }
	   } catch (IOException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	   }
	  }

	 }

	 private class SocketServerReplyThread extends Thread {

	  private Socket hostThreadSocket;
	  int cnt;

	  SocketServerReplyThread(Socket socket, int c) {
	   hostThreadSocket = socket;
	   cnt = c;
	  }

	  @Override
	  public void run() {
	   OutputStream outputStream;
	   String msgReply = "Hello from Android, you are #" + cnt;

	   try {
	    outputStream = hostThreadSocket.getOutputStream();
	             PrintStream printStream = new PrintStream(outputStream);
	             printStream.print(msgReply);
	             printStream.close();

	    message += "replayed: " + msgReply + "\n";

	    MainActivity.this.runOnUiThread(new Runnable() {

	     @Override
	     public void run() {
	      msg.setText(message);
	     }
	    });

	   } catch (IOException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	    message += "Something wrong! " + e.toString() + "\n";
	   }

	   MainActivity.this.runOnUiThread(new Runnable() {

	    @Override
	    public void run() {
	     msg.setText(message);
	    }
	   });
	  }

	 }

	 private String getIpAddress() {
	  String ip = "";
	  try {
	   Enumeration<NetworkInterface> enumNetworkInterfaces = NetworkInterface
	     .getNetworkInterfaces();
	   while (enumNetworkInterfaces.hasMoreElements()) {
	    NetworkInterface networkInterface = enumNetworkInterfaces
	      .nextElement();
	    Enumeration<InetAddress> enumInetAddress = networkInterface
	      .getInetAddresses();
	    while (enumInetAddress.hasMoreElements()) {
	     InetAddress inetAddress = enumInetAddress.nextElement();

	     if (inetAddress.isSiteLocalAddress()) {
	      ip += "SiteLocalAddress: " 
	        + inetAddress.getHostAddress() + "\n";
	     }
	     
	    }

	   }

	  } catch (SocketException e) {
	   // TODO Auto-generated catch block
	   e.printStackTrace();
	   ip += "Something Wrong! " + e.toString() + "\n";
	  }

	  return ip;
	 }
	}